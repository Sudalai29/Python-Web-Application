name: CI/CD Fargate Deployment
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1
      ECR_REPO: myapp-dev-repo  # your ECR repo
      IMAGE_TAG: ${{ github.sha }}
      # Uncomment these if you want automatic ECS deployment
      # CLUSTER_NAME: myapp-dev-cluster
      # SERVICE_NAME: myapp-dev-service
    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
          
      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # 3Ô∏è‚É£ Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      # 4Ô∏è‚É£ Set up Docker Buildx for caching and multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 5Ô∏è‚É£ Build Docker image with cache
      - name: Build Docker image
        run: |
          docker build \
            --tag $ECR_REPO:latest \
            --cache-from=type=registry,ref=${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:latest \
            .
      
      # 6Ô∏è‚É£ Security scan with Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $ECR_REPO:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      # 6bÔ∏è‚É£ Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      # 6cÔ∏è‚É£ Run Trivy scan with table output and fail on vulnerabilities
      - name: Run Trivy vulnerability scanner (fail on high/critical)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $ECR_REPO:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      
      # 7Ô∏è‚É£ Tag Docker image
      - name: Tag Docker image
        run: |
          docker tag $ECR_REPO:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${IMAGE_TAG}
          docker tag $ECR_REPO:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:latest
      
      # 8Ô∏è‚É£ Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${IMAGE_TAG}
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:latest
      
      # 9Ô∏è‚É£ Optional: Update ECS service
      # Uncomment if you want automatic deployment
      # - name: Update ECS service
      #   run: |
      #     aws ecs update-service \
      #       --cluster $CLUSTER_NAME \
      #       --service $SERVICE_NAME \
      #       --force-new-deployment
      
      # üîü Notify GitHub of deployment success
      - name: Deployment complete
        run: echo "‚úÖ Docker image built, scanned, and pushed successfully!"
