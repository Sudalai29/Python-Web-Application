name: CI/CD Fargate Deployment
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1
      ECR_REPO: myapp-dev-repo           # your ECR repo
      IMAGE_TAG: ${{ github.sha }}       # unique SHA for immutable deployment
      CLUSTER_NAME: myapp-dev-cluster    # ECS cluster created via Terraform
      SERVICE_NAME: myapp-dev-service    # ECS service created via Terraform
      CONTAINER_NAME: myapp-container    # container name used in task definition

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3Ô∏è‚É£ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4Ô∏è‚É£ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5Ô∏è‚É£ Build Docker image with cache
      - name: Build Docker image
        run: |
          docker build \
            --tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest \
            --tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }} \
            --cache-from=type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest \
            .

      # 6Ô∏è‚É£ Scan Docker image with Trivy (fixed image reference)
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest
          format: table
          exit-code: 1
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

      # 7Ô∏è‚É£ Push Docker image to ECR (simplified since we already tagged in build step)
      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest

      # 8Ô∏è‚É£ Register new ECS task definition with SHA tag
      - name: Register new ECS task definition
        id: task-def
        run: |
          FAMILY="${{ env.CONTAINER_NAME }}-task"
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}"

          # Get current task definition
          aws ecs describe-task-definition --task-definition $FAMILY > task-def.json

          # Update container image
          jq --arg IMAGE "$IMAGE_URI" \
            '.taskDefinition | {family: .family, containerDefinitions: [.containerDefinitions[0] | .image=$IMAGE, .name, .essential, .portMappings, .logConfiguration, .secrets], networkMode: .networkMode, requiresCompatibilities: .requiresCompatibilities, cpu: .cpu, memory: .memory, executionRoleArn: .executionRoleArn, taskRoleArn: .taskRoleArn}' \
            task-def.json > new-task-def.json

          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      # 9Ô∏è‚É£ Update ECS service to use new task definition
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition ${{ env.NEW_TASK_DEF_ARN }} \
            --force-new-deployment

      # üîü Notify deployment success
      - name: Deployment complete
        run: echo "‚úÖ Docker image built, scanned, pushed, and ECS updated successfully!"
